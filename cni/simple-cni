#!/bin/bash

# @author: Bruno Freitas
# @version 1 (09/Feb/2023)
# Inspiration: https://github.com/eranyanay/cni-from-scratch

### GLOBAL VARIABLES

logs=/opt/cni/bin/simple-cni.log
ip_fabric=/opt/cni/bin/simple-cni-last_allocated_ip

# Output template for the CNI ADD command
add_output_template='
{
	"cniVersion" : "%s",
	"interfaces" : [
		{
			"name"    : "%s",
			"mac"     : "%s",
			"sandbox" : "%s"
		}
	],
	"ips" : [
		{
			"version"   : "4",
			"address"   : "%s/%s",
			"gateway"   : "%s",
			"interface" : 0
		}
	]
}'

# Output template for the CNI VERSION command
version_output_template='
{
	"cniVersion" : "%s",
	"supportedVersions": [ "0.3.0", "0.3.1", "0.4.0" ]
}'

### AUX FUNCTIONS

# Function to get the container's IP address
get_ip(){
	if [ -f /opt/cni/bin/simple-cni-last_allocated_ip ]; then
		ip=`cat /opt/cni/bin/simple-cni-last_allocated_ip`
	else
		ip=2
	fi
	ip=$(($ip+1))
	echo "$ip" > $ip_fabric
	echo $ip
}


# Function to get the CNI version (specified in the CNI config file)
get_version(){
	version=$(cat /etc/cni/net.d/simple-cni.conf | jq -r ".cniVersion")
	echo $version
}


### MAIN

case $CNI_COMMAND in
ADD)
	# IP address used in the host's subnet)
	podcidr=$(cat /etc/cni/net.d/simple-cni.conf | jq -r ".podcidr")
	podcidr_gw=$(echo $podcidr | sed "s:0/24:1:g") # returns gateway finishing in address .1
	mask=$(echo $podcidr | awk -F  "/" '{print $2}')

	# Create the VETH pair and attach one side to the bridge and the other side to 
	# the container's namespace
	if_id=$(date +%s%N | md5sum | head -c 6)
	host_ifname="veth${if_id}"
	ip link add $CNI_IFNAME type veth peer name $host_ifname
	ip link set $host_ifname up
	ip link set $host_ifname master cni0
	ln -sfT $CNI_NETNS /var/run/netns/$CNI_CONTAINERID
	ip link set $CNI_IFNAME netns $CNI_CONTAINERID

	echo "+++ HOST SIDE" >> $logs
	echo $(ifconfig $host_ifname) >> $logs
	echo $(ip netns) >> $logs

	# Add the IP address to the container's namespace side interface
	host_part=`get_ip`
	ip_addr=$(echo $podcidr | sed "s:0/24:${host_part}:g") # returns IP address finishing in host_part
	ip netns exec $CNI_CONTAINERID ip link set $CNI_IFNAME up
	ip netns exec $CNI_CONTAINERID ip addr add $ip_addr/24 dev $CNI_IFNAME
	ip netns exec $CNI_CONTAINERID ip route add default via $podcidr_gw

	echo "+++ POD SIDE" >> $logs
	echo $(ip netns exec $CNI_CONTAINERID ifconfig $CNI_IFNAME) >> $logs
	echo $(ip netns exec $CNI_CONTAINERID ip route) >> $logs

	# Get the MAC address from container
	mac=$(ip netns exec $CNI_CONTAINERID ip link show ${CNI_IFNAME} | awk '/ether/ {print $2}')

	# Get the plugin version
	version=`get_version`

	# Print the summary (contains Container Interface name, MAC address, IP address, 
	# and the namespace attached)
	output=$(printf "${add_output_template}" $version $CNI_IFNAME $mac $CNI_NETNS $ip_addr $mask $podcidr_gw)
	echo $output >> $logs
	echo $output
;;
DEL)
	# Delete the container's namespace (thus, all its networking)
	rm -rf /var/run/netns/$CNI_CONTAINERID
;;
GET)
	echo GET - Not implemented. >> $logs
	exit 1
;;
VERSION)
	# Print the plugin version
	version=`get_version`
	output=$(printf "${version_output_template}" $version)
	echo $output >> $log
	echo "$output"
;;
*)
	echo "Unknown CNI command: $CNI_COMMAND" >> $logs
	echo "Unknown CNI command: $CNI_COMMAND" 
	exit 1
;;
esac
